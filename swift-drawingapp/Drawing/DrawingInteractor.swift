//
//  DrawingInteractor.swift
//  swift-drawingapp
//
//  Created by USER on 2022/10/19.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Foundation

protocol DrawingBusinessLogic {
    func addSquare(request: Drawing.AddSquareEvent.Request)
    func addLine(request: Drawing.DrawEvent.Request)
}

protocol DrawingDataStore { }

class DrawingInteractor: DrawingBusinessLogic, DrawingDataStore {
    var presenter: DrawingPresentationLogic?
    var worker: DrawingWorker?

    func addSquare(request: Drawing.AddSquareEvent.Request) {
        let randomX = (0...Int(floor(request.bounds.width))).randomElement() ?? 0
        let randomY = (0...Int(floor(request.bounds.height))).randomElement() ?? 0
        let origin = CGPoint(x: randomX, y: randomY)
        let size = Drawing.squareSize
        let color = Drawing.allSystemColor.randomElement() ?? .systemYellow
        let response = Drawing.AddSquareEvent.Response(rect: .init(origin: origin, size: size),
                                                       color: color)
        presenter?.presentSquare(response: response)
    }
    
    func addLine(request: Drawing.DrawEvent.Request) {
        let color = Drawing.allSystemColor.randomElement() ?? .systemYellow
        let response = Drawing.DrawEvent.Response(rect: request.bounds, color: color)
        presenter?.presentDraw(response: response)
    }
}
